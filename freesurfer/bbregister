######### USAGE: bbregister

Required Arguments:
   --s subject  : FreeSurfer subject name
   --mov volid  : input/movable volume
   --reg register.dat : output registration file

Initialization Arguments (one required)

   --init-fsl : initialize the registration with FSL
   --init-spm : initialize the registration with SPM
   --init-header : initialize the registration based on header goemetry
   --init-reg initregfile : explicitly pass registration

Contrast Arguments (one required)

   --t1 : assume t1 contrast, ie, WM brighter than GM
   --t2 : assume t2 contrast, ie, GM brighter than WM (default)
   --bold : same as --t2
   --dti  : same as --t2

Optional Arguments

   --int intvol : intermediate volume
   --mid-frame : reg to middle frame (not with --frame)
   --frame frameno : reg to frameno (default 0=1st)
   --template-out template : save template (good with --frame)
   --o outvol : resample mov and save as outvol
   --s-from-reg reg : get subject name from regfile
   --rms rmsfile : RMS change in cortical surface position

   --lh-only : only use left hemi
   --rh-only : only use right hemi
   --slope1 slope1 : cost slope for 1st stage (default is 0.5)
   --slope2  slope2 : cost slope for 2nd stage (default is 0.5)
   --offset2 offset2 : cost offset for 2nd stage (default is 0)
   --tol tol : 2nd stage tolerance (default is 1e-8)
   --rand-init randmax : randomly change input to 1st stage reg
   --gm-proj-frac frac : 2nd stage, default is 0.5
   --wm-proj-abs  dist : 2nd stage, default is 2mm
   --subsamp nsub : 2nd stage vertex subsampling, default is 1
   --nearest  : 2nd stage, use nearest neighbor interp (defalt is trilinear)
   --epi-mask : mask out brain edge and B0 regions (1st and 2nd stages)
   --brute1max max     : pass 1 search -max to +max (default 4)
   --brute1delta delta : pass 1 search -max to +max step delta (default 4)
   --subsamp1 nsubsamp  : pass 1 vertex subsampling (default 1)

   --surf-cost basename : saves final cost as basename.?h.mgh
   --surf-con  basename : saves final contrast as basename.?h.mgh

   --tmp tmpdir  : temporary dir (implies --nocleanup)
   --nocleanup  : do not delete temporary files
   --version : print version and exit
   --help    : print help and exit


This program performs within-subject, cross-modal registration using a
boundary-based cost function. The registration is constrained to be 6
DOF (rigid). It is required that you have an anatomical scan of the
subject that has been analyzed in freesurfer.

INPUTS (all required)

--s subject

Subject name as found in $SUBJECTS_DIR.

--mov movvol

"Moveable" volume. This is the template for the cross-modal volume. Eg,
for fMRI, it is the volume used for motion correction.

--reg register.dat

Output FreeSurfer (tkregister-style) registration file (simple text).

INITIALIZATION METHODS (Choose One)

--init-fsl

Initialize using FSL FLIRT (requires that FSL be installed)

--init-spm

Initialize using SPM spm_coreg (requires that SPM and matlab be installed)

--init-header

Assume that the geometry information in the cross-modal and anatomical
are sufficient to get a close voxel-to-voxel registration. This
usually is only the case if they were acquired in the same session.

--init-reg register.init.dat

Supply an initial registration matrix.

CONTRAST (Choose One)

There are only two types of contrast that bbregister understands:
  1. Gray matter brighter than white matter (--t2, --bold, --dti)
  2. White matter brighter than gray matter (--t1)

OTHER ARGUMENTS

--int intvol

Supply a volume to use an an intermediate volume when performing
registration. This is useful for when the cross-modal is volume is a
partial field-of-view (FoV). If you acquire in the same session a
whole-head FoV, then pass the whole-head as the intermediate and the
partial as the moveable.

EXAMPLES:

1. Intialize with FLIRT, view result with tkregister2:

     bbregister --s bert --mov func.nii --init-fsl --reg register.dat
     tkregister2 --mov func.nii --reg register.dat --surf

2. Intialize with SPM, view result with tkregister2:

     bbregister --s bert --mov func.nii --init-spm --reg register.dat
     tkregister2 --mov func.nii --reg register.dat --surf

3. Register a partial FoV using whole FoV as intermdediate:

     bbregister --s bert --mov partial.nii --init-fsl \
       --int whole.nii --reg register.partial.dat
     tkregister2 --mov partial.nii --reg register.partial.dat --surf
     
#########

bbregister --s s1 --mov run2_moco4d.nii.gz --init-spm  --int T1.nii --reg register.dat
bbregister --s s1 --mov run2_moco4d.nii.gz --init-spm  --reg register.dat
